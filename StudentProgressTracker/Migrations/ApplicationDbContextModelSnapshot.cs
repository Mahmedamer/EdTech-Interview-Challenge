// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentProgressTracker.Data;

#nullable disable

namespace StudentProgressTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentProgressTracker.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentType = "Practice",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(5743),
                            Description = "Identify and write numbers 1-20",
                            DueDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 20,
                            SubjectId = 1,
                            Title = "Number Recognition 1-20",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(5744)
                        },
                        new
                        {
                            Id = 2,
                            AssignmentType = "Quiz",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6424),
                            Description = "Learn first 10 sight words",
                            DueDate = new DateTime(2025, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 10,
                            SubjectId = 2,
                            Title = "Sight Words Week 1",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6425)
                        },
                        new
                        {
                            Id = 3,
                            AssignmentType = "Project",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6442),
                            Description = "Daily weather tracking for one week",
                            DueDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 25,
                            SubjectId = 3,
                            Title = "Weather Observation",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6442)
                        },
                        new
                        {
                            Id = 4,
                            AssignmentType = "Homework",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6444),
                            Description = "Adding fractions with like denominators",
                            DueDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 30,
                            SubjectId = 5,
                            Title = "Fraction Addition",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6444)
                        },
                        new
                        {
                            Id = 5,
                            AssignmentType = "Project",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6445),
                            Description = "Complete book report with analysis",
                            DueDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 50,
                            SubjectId = 6,
                            Title = "Book Report: Charlotte's Web",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6446)
                        },
                        new
                        {
                            Id = 6,
                            AssignmentType = "Project",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6447),
                            Description = "Create 3D model of solar system",
                            DueDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 40,
                            SubjectId = 7,
                            Title = "Solar System Model",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6448)
                        },
                        new
                        {
                            Id = 7,
                            AssignmentType = "Test",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6449),
                            Description = "Solving quadratic equations unit test",
                            DueDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 100,
                            SubjectId = 9,
                            Title = "Quadratic Equations Test",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6449)
                        },
                        new
                        {
                            Id = 8,
                            AssignmentType = "Essay",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6450),
                            Description = "5-paragraph essay on themes in Romeo and Juliet",
                            DueDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 100,
                            SubjectId = 10,
                            Title = "Romeo and Juliet Essay",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6451)
                        },
                        new
                        {
                            Id = 9,
                            AssignmentType = "Lab",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6452),
                            Description = "Microscope lab on cell structures",
                            DueDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaxPoints = 75,
                            SubjectId = 11,
                            Title = "Cell Structure Lab",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6452)
                        });
                });

            modelBuilder.Entity("StudentProgressTracker.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(3659),
                            DateOfBirth = new DateTime(2018, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.wilson@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Emma",
                            Grade = 1,
                            IsActive = true,
                            LastName = "Wilson",
                            Notes = "Enthusiastic learner, loves reading",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(3665)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4778),
                            DateOfBirth = new DateTime(2018, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "liam.anderson@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Liam",
                            Grade = 1,
                            IsActive = true,
                            LastName = "Anderson",
                            Notes = "Struggles with math concepts, needs extra support",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4779)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4783),
                            DateOfBirth = new DateTime(2018, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sophia.martinez@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sophia",
                            Grade = 1,
                            IsActive = true,
                            LastName = "Martinez",
                            Notes = "Advanced reader, quiet in class",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4783)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4787),
                            DateOfBirth = new DateTime(2016, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "noah.thompson@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Noah",
                            Grade = 3,
                            IsActive = true,
                            LastName = "Thompson",
                            Notes = "Good at problem solving, active participant",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4787)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4790),
                            DateOfBirth = new DateTime(2016, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "olivia.garcia@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Olivia",
                            Grade = 3,
                            IsActive = true,
                            LastName = "Garcia",
                            Notes = "Excellent in science, curious about nature",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4790)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4791),
                            DateOfBirth = new DateTime(2016, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ethan.rodriguez@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ethan",
                            Grade = 3,
                            IsActive = true,
                            LastName = "Rodriguez",
                            Notes = "Sporadic attendance, needs encouragement",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4794),
                            DateOfBirth = new DateTime(2014, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ava.lee@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ava",
                            Grade = 5,
                            IsActive = true,
                            LastName = "Lee",
                            Notes = "Math whiz, helps other students",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4794)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4795),
                            DateOfBirth = new DateTime(2014, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mason.white@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mason",
                            Grade = 5,
                            IsActive = true,
                            LastName = "White",
                            Notes = "Struggles with reading comprehension",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4796)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4797),
                            DateOfBirth = new DateTime(2014, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "isabella.harris@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Isabella",
                            Grade = 5,
                            IsActive = true,
                            LastName = "Harris",
                            Notes = "Well-rounded student, consistent performer",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4798)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4807),
                            DateOfBirth = new DateTime(2014, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "william.clark@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "William",
                            Grade = 5,
                            IsActive = true,
                            LastName = "Clark",
                            Notes = "Creative writer, loves social studies",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4807)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4808),
                            DateOfBirth = new DateTime(2012, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mia.lewis@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mia",
                            Grade = 7,
                            IsActive = true,
                            LastName = "Lewis",
                            Notes = "Strong in all subjects, leadership qualities",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4808)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4836),
                            DateOfBirth = new DateTime(2012, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.walker@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "James",
                            Grade = 7,
                            IsActive = true,
                            LastName = "Walker",
                            Notes = "Inactive lately, needs motivation",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4840)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4841),
                            DateOfBirth = new DateTime(2012, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charlotte.hall@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Charlotte",
                            Grade = 7,
                            IsActive = true,
                            LastName = "Hall",
                            Notes = "Excels in science, future engineer",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4841)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4843),
                            DateOfBirth = new DateTime(2010, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "benjamin.young@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Benjamin",
                            Grade = 9,
                            IsActive = true,
                            LastName = "Young",
                            Notes = "Advanced in mathematics, peer tutor",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4843)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4845),
                            DateOfBirth = new DateTime(2010, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "amelia.king@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Amelia",
                            Grade = 9,
                            IsActive = true,
                            LastName = "King",
                            Notes = "Gifted writer, participates in debate team",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4845)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4846),
                            DateOfBirth = new DateTime(2010, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas.wright@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lucas",
                            Grade = 9,
                            IsActive = true,
                            LastName = "Wright",
                            Notes = "Struggling student, requires additional support",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4846)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4848),
                            DateOfBirth = new DateTime(2010, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "harper.lopez@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Harper",
                            Grade = 9,
                            IsActive = true,
                            LastName = "Lopez",
                            Notes = "Inconsistent attendance, family issues",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4848)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4849),
                            DateOfBirth = new DateTime(2008, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexander.hill@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alexander",
                            Grade = 11,
                            IsActive = true,
                            LastName = "Hill",
                            Notes = "AP student, college prep track",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4849)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4856),
                            DateOfBirth = new DateTime(2008, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "evelyn.green@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Evelyn",
                            Grade = 11,
                            IsActive = true,
                            LastName = "Green",
                            Notes = "Strong in humanities, weak in STEM",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4856)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4858),
                            DateOfBirth = new DateTime(2008, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "henry.adams@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Henry",
                            Grade = 11,
                            IsActive = true,
                            LastName = "Adams",
                            Notes = "Athlete, needs academic balance",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4858)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4859),
                            DateOfBirth = new DateTime(2007, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abigail.baker@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Abigail",
                            Grade = 12,
                            IsActive = true,
                            LastName = "Baker",
                            Notes = "Valedictorian candidate, exceptional student",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4859)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4861),
                            DateOfBirth = new DateTime(2007, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.nelson@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Michael",
                            Grade = 12,
                            IsActive = true,
                            LastName = "Nelson",
                            Notes = "Late bloomer, improving rapidly",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4861)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4862),
                            DateOfBirth = new DateTime(2007, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.carter@school.edu",
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Emily",
                            Grade = 12,
                            IsActive = true,
                            LastName = "Carter",
                            Notes = "Art-focused student, creative thinker",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(4862)
                        });
                });

            modelBuilder.Entity("StudentProgressTracker.Models.StudentAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherFeedback")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId", "AssignmentId")
                        .IsUnique();

                    b.ToTable("StudentAssignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 1,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8741),
                            Score = 19.0m,
                            Status = "Graded",
                            StudentId = 1,
                            SubmissionDate = new DateTime(2025, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Excellent work! Keep it up!",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8742)
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = 2,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9516),
                            Score = 10.0m,
                            Status = "Graded",
                            StudentId = 1,
                            SubmissionDate = new DateTime(2025, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Perfect sight word recognition",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9516)
                        },
                        new
                        {
                            Id = 3,
                            AssignmentId = 1,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9519),
                            Score = 12.0m,
                            Status = "Graded",
                            StudentId = 2,
                            SubmissionDate = new DateTime(2025, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Good effort, practice numbers 15-20 more",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9519)
                        },
                        new
                        {
                            Id = 4,
                            AssignmentId = 2,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9521),
                            Status = "NotStarted",
                            StudentId = 2,
                            TeacherFeedback = "Please complete and turn in",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9521)
                        },
                        new
                        {
                            Id = 5,
                            AssignmentId = 4,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9522),
                            Score = 30.0m,
                            Status = "Graded",
                            StudentId = 7,
                            SubmissionDate = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Perfect understanding of fractions!",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9522)
                        },
                        new
                        {
                            Id = 6,
                            AssignmentId = 6,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9524),
                            Score = 38.0m,
                            Status = "Graded",
                            StudentId = 7,
                            SubmissionDate = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Creative and accurate model",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9524)
                        },
                        new
                        {
                            Id = 7,
                            AssignmentId = 4,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9525),
                            Score = 22.0m,
                            Status = "Graded",
                            StudentId = 8,
                            SubmissionDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Good math work, keep practicing",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9526)
                        },
                        new
                        {
                            Id = 8,
                            AssignmentId = 5,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9527),
                            Score = 32.0m,
                            Status = "Graded",
                            StudentId = 8,
                            SubmissionDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Nice improvement in reading comprehension",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9527)
                        },
                        new
                        {
                            Id = 9,
                            AssignmentId = 7,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9529),
                            Score = 96.0m,
                            Status = "Graded",
                            StudentId = 14,
                            SubmissionDate = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Exceptional understanding of quadratics",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9529)
                        },
                        new
                        {
                            Id = 10,
                            AssignmentId = 9,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9530),
                            Score = 72.0m,
                            Status = "Graded",
                            StudentId = 14,
                            SubmissionDate = new DateTime(2025, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Good lab technique and observations",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9531)
                        },
                        new
                        {
                            Id = 11,
                            AssignmentId = 7,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9532),
                            Score = 45.0m,
                            Status = "Graded",
                            StudentId = 16,
                            SubmissionDate = new DateTime(2025, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Needs more practice with quadratic formula",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9532)
                        },
                        new
                        {
                            Id = 12,
                            AssignmentId = 8,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9534),
                            Status = "InProgress",
                            StudentId = 16,
                            TeacherFeedback = "Working on essay draft",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9534)
                        },
                        new
                        {
                            Id = 13,
                            AssignmentId = 7,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9535),
                            Status = "NotStarted",
                            StudentId = 17,
                            TeacherFeedback = "Please see me about makeup work",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9535)
                        },
                        new
                        {
                            Id = 14,
                            AssignmentId = 7,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9536),
                            Score = 100.0m,
                            Status = "Graded",
                            StudentId = 21,
                            SubmissionDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Outstanding work as always!",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9536)
                        },
                        new
                        {
                            Id = 15,
                            AssignmentId = 8,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9538),
                            Score = 98.0m,
                            Status = "Graded",
                            StudentId = 21,
                            SubmissionDate = new DateTime(2025, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherFeedback = "Insightful analysis and excellent writing",
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(9538)
                        });
                });

            modelBuilder.Entity("StudentProgressTracker.Models.StudentProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PerformanceScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ProgressLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudentId", "SubjectId", "AssessmentDate");

                    b.ToTable("StudentProgress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 95.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7710),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Excellent number recognition skills",
                            PerformanceScore = 92.0m,
                            ProgressLevel = "Advanced",
                            StudentId = 1,
                            SubjectId = 1,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7710)
                        },
                        new
                        {
                            Id = 2,
                            AssessmentDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 88.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8387),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Reading above grade level",
                            PerformanceScore = 90.0m,
                            ProgressLevel = "Advanced",
                            StudentId = 1,
                            SubjectId = 2,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8388)
                        },
                        new
                        {
                            Id = 3,
                            AssessmentDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 45.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8390),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Needs additional math support",
                            PerformanceScore = 52.0m,
                            ProgressLevel = "Below Basic",
                            StudentId = 2,
                            SubjectId = 1,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8390)
                        },
                        new
                        {
                            Id = 4,
                            AssessmentDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 60.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8392),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Showing improvement with phonics",
                            PerformanceScore = 65.0m,
                            ProgressLevel = "Basic",
                            StudentId = 2,
                            SubjectId = 2,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8392)
                        },
                        new
                        {
                            Id = 5,
                            AssessmentDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 98.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8394),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Exceptional mathematical reasoning",
                            PerformanceScore = 97.0m,
                            ProgressLevel = "Advanced",
                            StudentId = 7,
                            SubjectId = 5,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8394)
                        },
                        new
                        {
                            Id = 6,
                            AssessmentDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 85.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8395),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Strong science understanding",
                            PerformanceScore = 88.0m,
                            ProgressLevel = "Proficient",
                            StudentId = 7,
                            SubjectId = 7,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8396)
                        },
                        new
                        {
                            Id = 7,
                            AssessmentDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 55.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8397),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Reading comprehension needs work",
                            PerformanceScore = 58.0m,
                            ProgressLevel = "Basic",
                            StudentId = 8,
                            SubjectId = 6,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8397)
                        },
                        new
                        {
                            Id = 8,
                            AssessmentDate = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 72.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8399),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Better with math calculations",
                            PerformanceScore = 75.0m,
                            ProgressLevel = "Proficient",
                            StudentId = 8,
                            SubjectId = 5,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8399)
                        },
                        new
                        {
                            Id = 9,
                            AssessmentDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 96.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8416),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Consistently high performance",
                            PerformanceScore = 94.0m,
                            ProgressLevel = "Advanced",
                            StudentId = 14,
                            SubjectId = 9,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8416)
                        },
                        new
                        {
                            Id = 10,
                            AssessmentDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 89.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8418),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Strong in STEM subjects",
                            PerformanceScore = 91.0m,
                            ProgressLevel = "Advanced",
                            StudentId = 14,
                            SubjectId = 11,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8418)
                        },
                        new
                        {
                            Id = 11,
                            AssessmentDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 42.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8420),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Requires intensive support",
                            PerformanceScore = 48.0m,
                            ProgressLevel = "Below Basic",
                            StudentId = 16,
                            SubjectId = 9,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8420)
                        },
                        new
                        {
                            Id = 12,
                            AssessmentDate = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 58.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8422),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Some improvement in writing",
                            PerformanceScore = 62.0m,
                            ProgressLevel = "Basic",
                            StudentId = 16,
                            SubjectId = 10,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8422)
                        },
                        new
                        {
                            Id = 13,
                            AssessmentDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 35.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8423),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Attendance issues affecting progress",
                            PerformanceScore = 40.0m,
                            ProgressLevel = "Below Basic",
                            StudentId = 17,
                            SubjectId = 9,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8423)
                        },
                        new
                        {
                            Id = 14,
                            AssessmentDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 99.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8425),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Outstanding academic performance",
                            PerformanceScore = 98.0m,
                            ProgressLevel = "Advanced",
                            StudentId = 21,
                            SubjectId = 9,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8425)
                        },
                        new
                        {
                            Id = 15,
                            AssessmentDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionPercentage = 97.0m,
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8427),
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Exceptional writing and analysis skills",
                            PerformanceScore = 96.0m,
                            ProgressLevel = "Advanced",
                            StudentId = 21,
                            SubjectId = 10,
                            TimeSpentMinutes = 0,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(8427)
                        });
                });

            modelBuilder.Entity("StudentProgressTracker.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "MATH",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5198),
                            Description = "Basic arithmetic and number concepts",
                            Grade = 1,
                            IsActive = true,
                            Name = "Mathematics",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5202)
                        },
                        new
                        {
                            Id = 2,
                            Code = "READ",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5891),
                            Description = "Phonics, sight words, and comprehension",
                            Grade = 1,
                            IsActive = true,
                            Name = "Reading",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5891)
                        },
                        new
                        {
                            Id = 3,
                            Code = "SCI",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5894),
                            Description = "Nature, simple experiments, and observations",
                            Grade = 1,
                            IsActive = true,
                            Name = "Science",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5894)
                        },
                        new
                        {
                            Id = 4,
                            Code = "SS",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5896),
                            Description = "Community, family, and basic geography",
                            Grade = 1,
                            IsActive = true,
                            Name = "Social Studies",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5896)
                        },
                        new
                        {
                            Id = 5,
                            Code = "MATH",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5897),
                            Description = "Fractions, decimals, and basic algebra",
                            Grade = 5,
                            IsActive = true,
                            Name = "Mathematics",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5897)
                        },
                        new
                        {
                            Id = 6,
                            Code = "READ",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5898),
                            Description = "Advanced comprehension and writing skills",
                            Grade = 5,
                            IsActive = true,
                            Name = "Reading",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5899)
                        },
                        new
                        {
                            Id = 7,
                            Code = "SCI",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5900),
                            Description = "Earth science, biology, and scientific method",
                            Grade = 5,
                            IsActive = true,
                            Name = "Science",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5900)
                        },
                        new
                        {
                            Id = 8,
                            Code = "SS",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5901),
                            Description = "US history, geography, and civics",
                            Grade = 5,
                            IsActive = true,
                            Name = "Social Studies",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5901)
                        },
                        new
                        {
                            Id = 9,
                            Code = "MATH",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5902),
                            Description = "Algebra, geometry, and problem solving",
                            Grade = 9,
                            IsActive = true,
                            Name = "Mathematics",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5902)
                        },
                        new
                        {
                            Id = 10,
                            Code = "ENG",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5904),
                            Description = "Literature, composition, and critical thinking",
                            Grade = 9,
                            IsActive = true,
                            Name = "English",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5904)
                        },
                        new
                        {
                            Id = 11,
                            Code = "SCI",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5943),
                            Description = "Biology, chemistry, and physics concepts",
                            Grade = 9,
                            IsActive = true,
                            Name = "Science",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5943)
                        },
                        new
                        {
                            Id = 12,
                            Code = "SS",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5944),
                            Description = "World history and cultural studies",
                            Grade = 9,
                            IsActive = true,
                            Name = "Social Studies",
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 738, DateTimeKind.Utc).AddTicks(5944)
                        });
                });

            modelBuilder.Entity("StudentProgressTracker.Models.TeacherStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UnassignedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId", "StudentId", "IsActive")
                        .IsUnique()
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(6847),
                            IsActive = true,
                            StudentId = 1,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 2,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7279),
                            IsActive = true,
                            StudentId = 2,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7281),
                            IsActive = true,
                            StudentId = 3,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 4,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7321),
                            IsActive = true,
                            StudentId = 7,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 5,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7322),
                            IsActive = true,
                            StudentId = 8,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 6,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7323),
                            IsActive = true,
                            StudentId = 9,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 7,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7324),
                            IsActive = true,
                            StudentId = 10,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 8,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7325),
                            IsActive = true,
                            StudentId = 14,
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 9,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7326),
                            IsActive = true,
                            StudentId = 15,
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 10,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7327),
                            IsActive = true,
                            StudentId = 16,
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 11,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7341),
                            IsActive = true,
                            StudentId = 18,
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 12,
                            AssignedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 330, DateTimeKind.Utc).AddTicks(7342),
                            IsActive = true,
                            StudentId = 21,
                            TeacherId = 4
                        });
                });

            modelBuilder.Entity("StudentProgressTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ece5de07-1999-42f1-b00a-eeda1086d1aa",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 739, DateTimeKind.Utc).AddTicks(640),
                            Email = "admin@edtech.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$S36EcoDUOFo.vuQ0Zj6PMuk7854Ss8XvGqhDppqcO72Vy0t0dDK/S",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 739, DateTimeKind.Utc).AddTicks(643)
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb0bc439-bb84-4b1b-920e-aee06467046c",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 921, DateTimeKind.Utc).AddTicks(1587),
                            Email = "sarah.johnson@edtech.com",
                            EmailConfirmed = false,
                            FirstName = "Sarah",
                            IsActive = true,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$GMCid319nWv6kf60O45./.QcCyQ2gcbrDSIdUgRB.mBvtRNd5Dfui",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 12, 921, DateTimeKind.Utc).AddTicks(1595)
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c33cb726-8bbb-47fe-8ff8-e30ee3ed2b57",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 87, DateTimeKind.Utc).AddTicks(4796),
                            Email = "michael.brown@edtech.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            IsActive = true,
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$n2POrepGuYCN8VBdeVFqbe9xSaD0V3HcaFT0hbULt/g.LU/lPMdYi",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 87, DateTimeKind.Utc).AddTicks(4804)
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2671a54-aff7-4a2b-8b32-f6822880189d",
                            CreatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 219, DateTimeKind.Utc).AddTicks(9195),
                            Email = "jennifer.davis@edtech.com",
                            EmailConfirmed = false,
                            FirstName = "Jennifer",
                            IsActive = true,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$iTlTXQp1ykhJIGDrjSt2aeforXBEuQmGXqCe4q6UBwTBHx5I4SGFa",
                            PhoneNumberConfirmed = false,
                            Role = "Teacher",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 7, 11, 13, 56, 13, 219, DateTimeKind.Utc).AddTicks(9202)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("StudentProgressTracker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("StudentProgressTracker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentProgressTracker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("StudentProgressTracker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentProgressTracker.Models.Assignment", b =>
                {
                    b.HasOne("StudentProgressTracker.Models.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentProgressTracker.Models.StudentAssignment", b =>
                {
                    b.HasOne("StudentProgressTracker.Models.Assignment", "Assignment")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentProgressTracker.Models.Student", "Student")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentProgressTracker.Models.StudentProgress", b =>
                {
                    b.HasOne("StudentProgressTracker.Models.Student", "Student")
                        .WithMany("ProgressRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentProgressTracker.Models.Subject", "Subject")
                        .WithMany("ProgressRecords")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentProgressTracker.Models.TeacherStudent", b =>
                {
                    b.HasOne("StudentProgressTracker.Models.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentProgressTracker.Models.User", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentProgressTracker.Models.Assignment", b =>
                {
                    b.Navigation("StudentAssignments");
                });

            modelBuilder.Entity("StudentProgressTracker.Models.Student", b =>
                {
                    b.Navigation("ProgressRecords");

                    b.Navigation("StudentAssignments");

                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("StudentProgressTracker.Models.Subject", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ProgressRecords");
                });

            modelBuilder.Entity("StudentProgressTracker.Models.User", b =>
                {
                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
